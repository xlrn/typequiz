{"version":3,"sources":["types.js","index.js"],"names":["typeList","FIRE","WATER","GRASS","ELECTRIC","ROCK","GROUND","NORMAL","ICE","FIGHTING","POISON","PSYCHIC","GHOST","BUG","FLYING","DRAGON","DARK","STEEL","FAIRY","ScoreKeeper","props","score","TypeButton","className","value","type","onClick","TypeDisplay","types","length","Quiz","useState","setScore","setTypes","error","setError","isLoaded","setIsLoaded","weakness","setWeakness","quizButtons","setQuizButtons","status","setStatus","bigFetch","a","newTypes","weaknesses","resistances","immunities","random1","generateRandom","random2","fetch","response1","json","doData","checkRandom","response2","removeResistances","removeImmunities","gatherTypes","handleError","num1","num2","res","typesArr","weakArr","resArr","immuArr","push","name","weaknessArr","includes","addToWeaknesses","damage_relations","double_damage_from","resistArr","addToResistances","half_damage_from","addToImmunities","no_damage_from","resists","forEach","resist","splice","indexOf","immunity","renderTypeButton","handleQuizLogic","count","rando","getType","Object","values","i","j","shuffleArray","e","target","newScore","updateScore","useEffect","message","num","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13e1f28.chunk.js","sourcesContent":["const typeList = {\n    FIRE: \"fire\",\n    WATER: \"water\",\n    GRASS: \"grass\",\n    ELECTRIC: \"electric\",\n    ROCK: \"rock\",\n    GROUND: \"ground\",\n    NORMAL: \"normal\",\n    ICE: \"ice\",\n    FIGHTING: \"fighting\",\n    POISON: \"poison\",\n    PSYCHIC: \"psychic\",\n    GHOST: \"ghost\",\n    BUG: \"bug\",\n    FLYING: \"flying\",\n    DRAGON: \"dragon\",\n    DARK: \"dark\",\n    STEEL: \"steel\",\n    FAIRY: \"fairy\"\n}\n\nexport default typeList;","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport typeList from './types';\n\nfunction ScoreKeeper(props) {\n  return (\n    <div>\n      <h1>Correct Answers: {props.score}</h1>\n    </div>\n  )\n}\n\nfunction TypeButton(props) {\n  return (\n      <button className=\"typeButton\" value={props.type} onClick={props.onClick}>{props.type}</button>\n  )\n}\n\nfunction TypeDisplay(props) {\n  if (props.types.length > 1) {\n    return (\n      <div>\n        <h1>Your target type: {props.types[0]} / {props.types[1]}</h1>\n      </div>\n    )\n  } else {\n    return (\n      <h1>Your target type: {props.types[0]}</h1>\n    )\n  }\n}\n\nfunction Quiz() {\n  const [score, setScore] = useState(0);\n  const [types, setTypes] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [weakness, setWeakness] = useState([]);\n  const [quizButtons, setQuizButtons] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  async function bigFetch() {\n    let newTypes = [];\n    let weaknesses = [];\n    let resistances = [];\n    let immunities = [];\n    let random1 = generateRandom(18) + 1;\n    let random2 = generateRandom(18) + 1;\n    try {\n      const response1 = await fetch(`https://pokeapi.co/api/v2/type/${random1}/`);\n      const type1 = await response1.json();\n      doData(type1, newTypes, weaknesses, resistances, immunities);\n      if (checkRandom(random1, random2)) {\n        const response2 = await fetch(`https://pokeapi.co/api/v2/type/${random2}/`);\n        const type2 = await response2.json();\n        doData(type2, newTypes, weaknesses, resistances, immunities);\n        removeResistances(resistances, weaknesses);\n        removeImmunities(immunities, weaknesses);\n      }\n      setWeakness(weaknesses);\n      setTypes(newTypes);\n      gatherTypes(weaknesses[generateRandom(weaknesses.length)]);\n      setIsLoaded(true);\n    }\n    catch (error) {\n      handleError(error);\n    }\n  }\n\n  function handleError(error) {\n    if (error) {\n      setIsLoaded(true);\n      setError(error);\n    }\n  }\n\n  function checkRandom(num1, num2) {\n    return (num1 !== num2 ? true : false);\n  }\n\n  function doData(res, typesArr, weakArr, resArr, immuArr) {\n          typesArr.push(res.name);\n          addToWeaknesses(res.damage_relations.double_damage_from, weakArr);\n          addToResistances(res.damage_relations.half_damage_from, resArr);\n          addToImmunities(res.damage_relations.no_damage_from, immuArr)\n  }\n\n  function addToWeaknesses(res, weaknessArr) {\n    for(const type in res) {\n      if (!weaknessArr.includes(type)) {\n        weaknessArr.push(res[type].name);\n      }\n    }\n  }\n\n  function addToResistances(res, resistArr) {\n    for(const type in res) {\n      if (!resistArr.includes(type)) {\n        resistArr.push(res[type].name)\n      }\n    }\n  }\n\n  function addToImmunities(res, immuArr) {\n    for(const type in res) {\n      if (!immuArr.includes(type)) {\n        immuArr.push(res[type].name);\n      }\n    }\n  }\n\n  function removeResistances(resists, weaknessArr) {\n    resists.forEach(resist => {\n      if (weaknessArr.includes(resist)) {\n        weaknessArr.splice(weaknessArr.indexOf(resist), 1);\n      }\n    })\n  }\n\n  function removeImmunities(immunities, weaknesses) {\n    immunities.forEach(immunity => {\n      if (weaknesses.includes(immunity)) {\n        weaknesses.splice(weaknesses.indexOf(immunity), 1);\n      }\n    })\n  }\n  \n\n  // figure out some way to call fetchData on load\n  useEffect(() => {\n    bigFetch();\n  }, []);\n\n  function renderTypeButton(type) {\n    return (\n      <TypeButton type={type} onClick={handleQuizLogic}>{type}</TypeButton>\n    )\n  }\n\n  function gatherTypes(weakness) {\n    let types = [];\n    let count = 0;\n    while (count < 3) {\n      let rando = generateRandom(17) + 1;\n      let getType = Object.values(typeList)[rando];\n      if (getType !== weakness && !types.includes(getType)) {\n        types.push(getType);\n        count++;\n      }\n    }\n    types.push(weakness);\n    shuffleArray(types);\n    setQuizButtons(types);\n  }\n\n  function shuffleArray(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = generateRandom(i+1);\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  function handleQuizLogic(e) {\n    if (weakness.includes(e.target.value)) {\n      bigFetch();\n      updateScore();\n    } else {\n      bigFetch();\n    }\n  }\n\n  function updateScore() {\n    let newScore = score + 1;\n    setScore(newScore);\n    if (newScore >= 10) {\n      setStatus(\"You have completed the quiz!\");\n    }\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <div>Loading...</div>\n  } else {\n  return (\n    <div className=\"container\">\n      <div className=\"text\">Reach 10 points to finish the quiz.</div>\n      <div>{status}</div>\n      <TypeDisplay types={types}/>\n      <ScoreKeeper score={score}/>\n      <div className=\"text\">Select the type your target is weak to!</div>\n      <div className=\"buttons\">\n        {renderTypeButton(quizButtons[0])}\n        {renderTypeButton(quizButtons[1])}\n        {renderTypeButton(quizButtons[2])}\n        {renderTypeButton(quizButtons[3])}\n      </div>\n    </div>\n  )}\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quiz />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfunction generateRandom(num) {\n  return Math.floor(Math.random() * num);\n}"],"sourceRoot":""}