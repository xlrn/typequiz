{"version":3,"sources":["types.js","index.js"],"names":["typeList","FIRE","WATER","GRASS","ELECTRIC","ROCK","GROUND","NORMAL","ICE","FIGHTING","POISON","PSYCHIC","GHOST","BUG","FLYING","DRAGON","DARK","STEEL","FAIRY","ScoreKeeper","props","score","TypeButton","type","className","value","onClick","ResetButton","TypeDisplay","types","length","Quiz","useState","setScore","total","setTotal","setTypes","error","setError","isLoaded","setIsLoaded","weakness","setWeakness","quizButtons","setQuizButtons","status","setStatus","bigFetch","a","newTypes","weaknesses","resistances","immunities","random1","generateRandom","random2","random3","fetch","response1","json","addData","response2","removeTypeFromArray","gatherTypes","handleError","res","typesArr","weakArr","resArr","immuArr","push","name","addTypeToArray","damage_relations","double_damage_from","half_damage_from","no_damage_from","arr","includes","forEach","splice","indexOf","count","rando","getType","Object","values","i","j","shuffleArray","handleQuizLogic","e","target","newScore","percent","Math","floor","document","querySelectorAll","button","disabled","updateScore","renderTypeButton","useEffect","message","num","random","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82f9d8f8.chunk.js","sourcesContent":["const typeList = {\r\n    FIRE: \"fire\",\r\n    WATER: \"water\",\r\n    GRASS: \"grass\",\r\n    ELECTRIC: \"electric\",\r\n    ROCK: \"rock\",\r\n    GROUND: \"ground\",\r\n    NORMAL: \"normal\",\r\n    ICE: \"ice\",\r\n    FIGHTING: \"fighting\",\r\n    POISON: \"poison\",\r\n    PSYCHIC: \"psychic\",\r\n    GHOST: \"ghost\",\r\n    BUG: \"bug\",\r\n    FLYING: \"flying\",\r\n    DRAGON: \"dragon\",\r\n    DARK: \"dark\",\r\n    STEEL: \"steel\",\r\n    FAIRY: \"fairy\"\r\n}\r\n\r\nexport default typeList;","import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport typeList from './types';\r\n\r\nfunction ScoreKeeper(props) {\r\n  return (\r\n    <div>\r\n      <h1>Correct Answers: {props.score}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TypeButton(props) {\r\n  return (\r\n      <button type=\"button\" className=\"btn btn-primary typeButton\" value={props.type} onClick={props.onClick}>{props.type}</button>\r\n  )\r\n}\r\n\r\nfunction ResetButton(props) {\r\n  return (\r\n    <button className=\"btn btn-secondary resetButton\" onClick={props.onClick}>Reset</button>\r\n  )\r\n}\r\n\r\nfunction TypeDisplay(props) {\r\n  if (props.types.length > 1) {\r\n    return (\r\n      <div>\r\n        <h1>Your target type: {props.types[0]} / {props.types[1]}</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <h1>Your target type: {props.types[0]}</h1>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Quiz() {\r\n  const [score, setScore] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  const [types, setTypes] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [weakness, setWeakness] = useState([]);\r\n  const [quizButtons, setQuizButtons] = useState([]);\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  async function bigFetch() {\r\n    let newTypes = [];\r\n    let weaknesses = [];\r\n    let resistances = [];\r\n    let immunities = [];\r\n    let random1 = generateRandom(18) + 1;\r\n    let random2 = generateRandom(18) + 1;\r\n    let random3 = generateRandom(5);\r\n\r\n    try {\r\n      const response1 = await fetch(`https://pokeapi.co/api/v2/type/${random1}/`);\r\n      const type1 = await response1.json();\r\n      addData(type1, newTypes, weaknesses, resistances, immunities);\r\n      // set chance of single-type pokemon showing up as the question\r\n      if (random3 > 1 && random2 !== random1) {\r\n        const response2 = await fetch(`https://pokeapi.co/api/v2/type/${random2}/`);\r\n        const type2 = await response2.json();\r\n        addData(type2, newTypes, weaknesses, resistances, immunities);\r\n        removeTypeFromArray(resistances, weaknesses);\r\n        removeTypeFromArray(immunities, weaknesses);\r\n      }\r\n      setWeakness(weaknesses);\r\n      setTypes(newTypes);\r\n      gatherTypes(weaknesses[generateRandom(weaknesses.length)]);\r\n      setIsLoaded(true);\r\n    }\r\n    catch (error) {\r\n      handleError(error);\r\n    }\r\n  }\r\n\r\n  function handleError(error) {\r\n    if (error) {\r\n      setIsLoaded(true);\r\n      setError(error);\r\n    }\r\n  }\r\n\r\n  // figure out some better way to call bigFetch on load\r\n  useEffect(() => {\r\n    bigFetch();\r\n  }, []);\r\n\r\n  function addData(res, typesArr, weakArr, resArr, immuArr) {\r\n          typesArr.push(res.name);\r\n          addTypeToArray(res.damage_relations.double_damage_from, weakArr);\r\n          addTypeToArray(res.damage_relations.half_damage_from, resArr);\r\n          addTypeToArray(res.damage_relations.no_damage_from, immuArr);\r\n  }\r\n\r\n  function addTypeToArray(res, arr) {\r\n    for(const type in res) {\r\n      if (!arr.includes(type)) {\r\n        arr.push(res[type].name);\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeTypeFromArray(types, arr) {\r\n    types.forEach(type => {\r\n      if (arr.includes(type)) {\r\n        types.splice(type.indexOf(type), 1);\r\n      }\r\n    })\r\n  }\r\n\r\n  // set and shuffle array that will be used for the quiz button answers\r\n  function gatherTypes(weakness) {\r\n    let types = [];\r\n    let count = 0;\r\n    while (count < 3) {\r\n      let rando = generateRandom(17) + 1;\r\n      let getType = Object.values(typeList)[rando];\r\n      if (getType !== weakness && !types.includes(getType)) {\r\n        types.push(getType);\r\n        count++;\r\n      }\r\n    }\r\n    types.push(weakness);\r\n    shuffleArray(types);\r\n    setQuizButtons(types);\r\n  }\r\n\r\n  // update totals, scores and types upon clicking quiz button\r\n  function handleQuizLogic(e) {\r\n    updateTotal();\r\n    if (weakness.includes(e.target.value)) {\r\n      bigFetch();\r\n      updateScore();\r\n    } else {\r\n      bigFetch();\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    setScore(0);\r\n    setTotal(0);\r\n    setStatus(\"\");\r\n    bigFetch();\r\n  }\r\n\r\n  function updateTotal() {\r\n    let newTotal = total + 1;\r\n    setTotal(newTotal);\r\n  }\r\n\r\n  function updateScore() {\r\n    let newScore = score + 1;\r\n    setScore(newScore);\r\n    if (newScore >= 10) {\r\n      let percent = Math.floor((score / total) * 100);\r\n      disableButtons();\r\n      setStatus(`You have completed the quiz! You got ${percent}%!`);\r\n    }\r\n  }\r\n\r\n  function renderTypeButton(type) {\r\n    return (\r\n      <TypeButton type={type} onClick={handleQuizLogic}>{type}</TypeButton>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"text\">Reach 10 points to finish the quiz.</div>\r\n      <div>{status}</div>\r\n      <TypeDisplay types={types}/>\r\n      <ScoreKeeper score={score}/>\r\n      <div className=\"text\">Select the type your target is weak to!</div>\r\n      <div className=\"buttons\">\r\n        {renderTypeButton(quizButtons[0])}\r\n        {renderTypeButton(quizButtons[1])}\r\n        {renderTypeButton(quizButtons[2])}\r\n        {renderTypeButton(quizButtons[3])}\r\n      </div>\r\n      <div>\r\n        <ResetButton onClick={handleReset}/>\r\n      </div>\r\n    </div>\r\n  )}\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Quiz />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// generate random number 0 to num\r\nfunction generateRandom(num) {\r\n  return Math.floor(Math.random() * num);\r\n}\r\n\r\n// shuffle the array by using the durstenfeld shuffle\r\n// pick random element, exclude from next draw by swapping with\r\n// current element, done in place.\r\nfunction shuffleArray(a) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = generateRandom(i+1);\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction disableButtons() {\r\n  let buttons = document.querySelectorAll(\".typeButton\");\r\n  buttons.forEach(button => button.disabled = true);\r\n}"],"sourceRoot":""}