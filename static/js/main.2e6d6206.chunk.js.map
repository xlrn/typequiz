{"version":3,"sources":["types.js","index.js"],"names":["typeList","FIRE","WATER","GRASS","ELECTRIC","ROCK","GROUND","NORMAL","ICE","FIGHTING","POISON","PSYCHIC","GHOST","BUG","FLYING","DRAGON","DARK","STEEL","FAIRY","ScoreKeeper","props","score","TypeButton","type","className","value","onClick","ResetButton","TypeDisplay","typeString","types","length","StatusDisplay","status","Quiz","useState","setScore","total","setTotal","setTypes","error","setError","isLoaded","setIsLoaded","weakness","setWeakness","quizButtons","setQuizButtons","setStatus","bigFetch","a","newTypes","weaknesses","resistances","immunities","typeId1","generateRandom","typeId2","singleTypeChance","fetch","response1","json","addData","response2","removeTypeFromArray","typeButtons","shuffleTypes","handleError","res","typesArr","weakArr","resArr","immuArr","push","name","addTypeToArray","damage_relations","double_damage_from","half_damage_from","no_damage_from","arr","includes","forEach","splice","indexOf","count","rando","getType","Object","values","i","j","shuffleArray","handleQuizLogic","e","target","changeStatusColor","newScore","percent","Math","floor","document","querySelectorAll","button","disabled","updateScore","renderTypeButton","color","querySelector","style","useEffect","message","num","random","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e6d6206.chunk.js","sourcesContent":["const typeList = {\n    FIRE: \"fire\",\n    WATER: \"water\",\n    GRASS: \"grass\",\n    ELECTRIC: \"electric\",\n    ROCK: \"rock\",\n    GROUND: \"ground\",\n    NORMAL: \"normal\",\n    ICE: \"ice\",\n    FIGHTING: \"fighting\",\n    POISON: \"poison\",\n    PSYCHIC: \"psychic\",\n    GHOST: \"ghost\",\n    BUG: \"bug\",\n    FLYING: \"flying\",\n    DRAGON: \"dragon\",\n    DARK: \"dark\",\n    STEEL: \"steel\",\n    FAIRY: \"fairy\"\n}\n\nexport default typeList;","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport typeList from './types';\n\nfunction ScoreKeeper(props) {\n  return (\n    <div>\n      <h1>Correct Answers: {props.score}</h1>\n    </div>\n  )\n}\n\nfunction TypeButton(props) {\n  return (\n      <button type=\"button\" className=\"btn btn-primary typeButton\" value={props.type} onClick={props.onClick}>{props.type}</button>\n  )\n}\n\nfunction ResetButton(props) {\n  return (\n    <button className=\"btn btn-secondary resetButton\" onClick={props.onClick}>Reset</button>\n  )\n}\n\nfunction TypeDisplay(props) {\n  let typeString = `Your target type: ${props.types[0]}`;\n  if (props.types.length > 1) {\n    typeString = typeString + `/ ${props.types[1]}`\n  }\n  return (\n    <div>\n      <h1>{typeString}</h1>\n    </div>\n  )\n}\n\nfunction StatusDisplay(props) {\n  return (\n    <div>\n      <h1 className=\"statusDisplay\">{props.status}</h1>\n    </div>\n  )\n}\n\nfunction Quiz() {\n  const [score, setScore] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [types, setTypes] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [weakness, setWeakness] = useState([]);\n  const [quizButtons, setQuizButtons] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n\n  // main function for updating types displayed on the quiz\n  async function bigFetch() {\n    let newTypes = [];\n    let weaknesses = [];\n    let resistances = [];\n    let immunities = [];\n    let typeId1 = generateRandom(18) + 1;\n    let typeId2 = generateRandom(18) + 1;\n    let singleTypeChance = generateRandom(5);\n\n    try {\n      // grab first random type from api\n      const response1 = await fetch(`https://pokeapi.co/api/v2/type/${typeId1}/`);\n      const type1 = await response1.json();\n      addData(type1, newTypes, weaknesses, resistances, immunities);\n      // set chance of single-type pokemon showing up as the question\n      // make sure the two random types will also not be the same\n      if (singleTypeChance > 1 && typeId2 !== typeId1) {\n        const response2 = await fetch(`https://pokeapi.co/api/v2/type/${typeId2}/`);\n        const type2 = await response2.json();\n        addData(type2, newTypes, weaknesses, resistances, immunities);\n        // filter out resistances and immunities from the weaknesses array \n        // to only allow weaknesses from different type interactions\n        // i.e. a fire/water type pokemon would not be weak to fire because water is resistant to itself\n        removeTypeFromArray(resistances, weaknesses);\n        removeTypeFromArray(immunities, weaknesses);\n      }\n      setWeakness(weaknesses);\n      setTypes(newTypes);\n      let typeButtons = shuffleTypes(weaknesses[generateRandom(weaknesses.length)]);\n      setQuizButtons(typeButtons);\n      setIsLoaded(true);\n    }\n    catch (error) {\n      handleError(error);\n    }\n  }\n\n  function handleError(error) {\n    if (error) {\n      setIsLoaded(true);\n      setError(error);\n    }\n  }\n\n  // figure out some better way to call bigFetch on load\n  useEffect(() => {\n    bigFetch();\n  }, []);\n\n  // adds the result from api call to each array, weaknesses, resistances, immunities\n  function addData(res, typesArr, weakArr, resArr, immuArr) {\n    typesArr.push(res.name);\n    addTypeToArray(res.damage_relations.double_damage_from, weakArr);\n    addTypeToArray(res.damage_relations.half_damage_from, resArr);\n    addTypeToArray(res.damage_relations.no_damage_from, immuArr);\n  }\n\n  function addTypeToArray(res, arr) {\n    for(const type in res) {\n      if (!arr.includes(type)) {\n        arr.push(res[type].name);\n      }\n    }\n  }\n\n  function removeTypeFromArray(types, arr) {\n    types.forEach(type => {\n      if (arr.includes(type)) {\n        arr.splice(arr.indexOf(type), 1);\n      }\n    })\n  }\n\n  // returns a shuffled array of 4 types, one being the weakness\n  function shuffleTypes(weakness) {\n    let types = [];\n    let count = 0;\n    while (count < 3) {\n      let rando = generateRandom(17) + 1;\n      let getType = Object.values(typeList)[rando];\n      if (getType !== weakness && !types.includes(getType)) {\n        types.push(getType);\n        count++;\n      }\n    }\n    types.push(weakness);\n    let shuffledTypes = shuffleArray(types);\n    return shuffledTypes;\n  }\n\n  // update totals, scores and types upon clicking quiz button\n  function handleQuizLogic(e) {\n    updateTotal();\n    if (weakness.includes(e.target.value)) {\n      bigFetch();\n      setStatus(\"Correct!\");\n      changeStatusColor(\"green\");\n      updateScore();\n    } else {\n      bigFetch();\n      setStatus(\"Incorrect!\");\n      changeStatusColor(\"red\");\n    }\n  }\n\n  function handleReset() {\n    setScore(0);\n    setTotal(0);\n    setStatus(\"\");\n    changeStatusColor(\"black\");\n    bigFetch();\n  }\n\n  // total is used to calculate the percentage given at the completion message\n  function updateTotal() {\n    let newTotal = total + 1;\n    setTotal(newTotal);\n  }\n\n  // update the score upon answering the question correctly\n  // disables button and delivers completion message upon reaching 10 points\n  function updateScore() {\n    let newScore = score + 1;\n    setScore(newScore);\n    if (newScore >= 10) {\n      let percent = Math.floor((score / total) * 100);\n      disableButtons();\n      setStatus(`You have completed the quiz! You got ${percent}%!`);\n      changeStatusColor(\"black\");\n    }\n  }\n\n  function renderTypeButton(type) {\n    return (\n      <TypeButton type={type} onClick={handleQuizLogic}>{type}</TypeButton>\n    )\n  }\n\n  function changeStatusColor(color) {\n    let display = document.querySelector(\".statusDisplay\");\n    display.style.color = color;\n  }\n\n  // render error message if one occurs\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    // render loading message if not loaded\n    return <div>Loading...</div>\n  } else {\n    return (\n        <div className=\"container\">\n          <div className=\"text\">Reach 10 points to finish the quiz.</div>\n          <StatusDisplay status={status}/>\n          <TypeDisplay types={types}/>\n          <ScoreKeeper score={score}/>\n          <div className=\"text\">Select the type your target is weak to!</div>\n          <div className=\"buttons\">\n            {renderTypeButton(quizButtons[0])}\n            {renderTypeButton(quizButtons[1])}\n            {renderTypeButton(quizButtons[2])}\n            {renderTypeButton(quizButtons[3])}\n          </div>\n          <div>\n            <ResetButton onClick={handleReset}/>\n          </div>\n        </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quiz />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// generate random number 0 to num\nfunction generateRandom(num) {\n  return Math.floor(Math.random() * num);\n}\n\n// shuffle the array by using the durstenfeld shuffle\n// pick random element, exclude from next draw by swapping with\n// current element, done in place.\nfunction shuffleArray(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = generateRandom(i+1);\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction disableButtons() {\n  let buttons = document.querySelectorAll(\".typeButton\");\n  buttons.forEach(button => button.disabled = true);\n}"],"sourceRoot":""}