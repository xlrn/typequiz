{"version":3,"sources":["types.js","index.js"],"names":["typeList","FIRE","WATER","GRASS","ELECTRIC","ROCK","GROUND","NORMAL","ICE","FIGHTING","POISON","PSYCHIC","GHOST","BUG","FLYING","DRAGON","DARK","STEEL","FAIRY","ScoreKeeper","props","score","TypeButton","className","value","type","onClick","Quiz","useState","setScore","setType","error","setError","isLoaded","setIsLoaded","weakness","setWeakness","quizButtons","setQuizButtons","status","setStatus","fetchData","randomType","Math","floor","random","fetch","then","res","json","result","name","weaknesses","damage_relations","double_damage_from","weaknessState","push","types","count","rando","getType","Object","values","includes","a","i","length","j","shuffleArray","gatherTypes","renderTypeButton","handleQuizLogic","e","target","newScore","updateScore","useEffect","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42ed517d.chunk.js","sourcesContent":["const typeList = {\n    FIRE: \"fire\",\n    WATER: \"water\",\n    GRASS: \"grass\",\n    ELECTRIC: \"electric\",\n    ROCK: \"rock\",\n    GROUND: \"ground\",\n    NORMAL: \"normal\",\n    ICE: \"ice\",\n    FIGHTING: \"fighting\",\n    POISON: \"poison\",\n    PSYCHIC: \"psychic\",\n    GHOST: \"ghost\",\n    BUG: \"bug\",\n    FLYING: \"flying\",\n    DRAGON: \"dragon\",\n    DARK: \"dark\",\n    STEEL: \"steel\",\n    FAIRY: \"fairy\"\n}\n\nexport default typeList;","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport typeList from './types';\n\nfunction ScoreKeeper(props) {\n  return (\n    <div>\n      <h1>Correct Answers: {props.score}</h1>\n    </div>\n  )\n}\n\nfunction TypeButton(props) {\n  return (\n      <button className=\"typeButton\" value={props.type} onClick={props.onClick}>{props.type}</button>\n  )\n}\n\nfunction Quiz() {\n  // lift state from somebutton into quiz\n  const [score, setScore] = useState(0);\n  const [type, setType] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [weakness, setWeakness] = useState([]);\n  const [quizButtons, setQuizButtons] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  \n  function fetchData() {\n    let randomType = Math.floor(Math.random() * 18) + 1;\n    fetch(`https://pokeapi.co/api/v2/type/${randomType}/`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setType(result.name);\n          let weaknesses = result.damage_relations.double_damage_from;\n          let weaknessState = [];\n          for(const type in weaknesses) {\n            weaknessState.push(weaknesses[type].name);\n          }\n          setWeakness(weaknessState);\n          let rando = Math.floor(Math.random() * weaknessState.length);\n          gatherTypes(weaknessState[rando]);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n      })\n  }\n  \n  // figure out some way to call fetchData on load\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  function renderTypeButton(type) {\n    return (\n      <TypeButton type={type} onClick={handleQuizLogic}>{type}</TypeButton>\n    )\n  }\n\n  function gatherTypes(weakness) {\n    let types = [];\n    let count = 0;\n    while (count < 3) {\n      let rando = Math.floor(Math.random() * 17) + 1;\n      let getType = Object.values(typeList)[rando];\n      if (getType !== weakness && !types.includes(getType)) {\n        types.push(getType);\n        count++;\n      }\n    }\n    types.push(weakness);\n    shuffleArray(types);\n    setQuizButtons(types);\n  }\n\n  function shuffleArray(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  function handleQuizLogic(e) {\n    if (weakness.includes(e.target.value)) {\n      updateScore();\n      fetchData();\n    } else {\n      fetchData();\n    }\n  }\n\n  function updateScore() {\n    let newScore = score + 1;\n    setScore(newScore);\n    if (newScore >= 10) {\n      setStatus(\"You have completed the quiz!\");\n    }\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <div>Loading...</div>\n  } else {\n  return (\n    <div className=\"container\">\n      <div>{status}</div>\n      <h1>{type}</h1>\n      <ScoreKeeper score={score}/>\n      <div className=\"buttons\">\n        {renderTypeButton(quizButtons[0])}\n        {renderTypeButton(quizButtons[1])}\n        {renderTypeButton(quizButtons[2])}\n        {renderTypeButton(quizButtons[3])}\n      </div>\n    </div>\n  )}\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quiz />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}